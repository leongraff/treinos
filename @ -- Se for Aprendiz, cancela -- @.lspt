@ -- Se for Aprendiz, cancela -- @

Se(R034FUN.TipCon = 6)
  Cancel(1);


Se(CodHor = 11)
{
  Se(HorSit[105] <= 20)  @Se houver menos de 20 minutos saida intermediária;@
  {
    HorSit[001] = HorSit[001] + HorSit[105];
    HorSit[105] = 0;
  }
}

@ -- Verifica Marcações -- @
Definir Cursor Cur_R070ACC;
Definir Data dDatPro;
Definir Numero xHorAcc[12];

dDatPro = DatPro;
xInt1 = 0;
xInt2 = 0;
xInt3 = 0;
xIntA = 0;
xIntB = 0;
xIntC = 0;
xIntD = 0;
xsit15 = 0;


xNumEmp = R034FUN.NumEmp;
xTipCol = R034FUN.TipCol;
xNumcad = R034FUN.NumCad;

xCont = 1;
xAuxCont = 0;
xDif = 0;
xDoze = 12;

Cur_R070ACC.Sql " SELECT HORACC FROM R070ACC \
                   WHERE NUMEMP = :XNUMEMP \ 
                     AND TIPCOL = :XTIPCOL \
                     AND NUMCAD = :XNUMCAD \
                     AND DATACC = :DDATPRO \   
                     ORDER BY HORACC "
                                               @DATACC >> DATAPU@
Cur_R070ACC.AbrirCursor();
Enquanto(Cur_R070ACC.Achou)
{
  xHorAcc[xCont] = Cur_R070ACC.HorAcc;
  
  xCont++;
  
  Cur_R070ACC.Proximo();
}
Cur_R070ACC.FecharCursor();

xCont++;

@ -- Verificar se tem quantidade impar de batidas, para transformar as situações em "Marcações Inválidas" -- @

xAuxCont = (xCont / 2);
TruncarValor(xAuxCont);
xDif = (xCont / 2) - xAuxCont;


Se((xDif < 1) e (xDif <> 0))
{
  /*HorSit[999] = HorSit[1] + HorSit[15] + HorSit[101] + HorSit[103] + HorSit[105] + HorSit[301] + HorSit[303];
  
  HorSit[15] = 0;
  HorSit[103] = 0;
  HorSit[105] = 0;
  HorSit[101] = 0;

  HorSit[1] = 0;
  HorSit[301] = 0;
  HorSit[303] = 0;  
  */
  Cancel(1);
}

@Fim Marcações Inválidas@


Se(xCont <= 4) @ -- Se houver menos de 4 marcações, não gerará a regra -- @
{ 
  Cancel(1);
}

Se (CodHor = 23 ou CodHor = 28 ou CodHor = 34 ou CodHor = 42 ou CodHor = 52) {


    /* Se(xHorAcc[8] <> 0)
    {
      xInt = (xHorAcc[7] - xHorAcc[6]);
    } */

    Se (xHorAcc[6] <> 0 e xHorAcc[7] = 0) { @ CONSIDERA 6 MARCAÇÕES E NÃO MAIS QUE ISSO @
        xIntA = (xHorAcc[3] - xHorAcc[2]);  @ PEGA DIF ENTRE 3A E 2A @
        Se (xIntA <= 22 e xIntA > 12){      @ SE FOR MENOR QUE 25 E MAIOR QUE 12 TRATA A DIFERENÇA JOGANDO PRAS HORAS FALTAS @
          eDif = xIntA - xDoze;             @ XDOZE = 12MIN @
          HorSit[15] = HorSit[15] + eDif;
        }
        Senao Se (xIntA > 22) {             @ SE FOR MAIOR QUE 22 MIN A DIFERENÇA ENTRE A 3A E A 2A A REGRA ASSUME QUE O CAFE FOI NA TARDE @
          xIntA = xHorAcc[5] - xHorAcc[4];  @ DESCONSIDERA XINTA COMO SENDO 3-2 E SE TORNA 5-4 @
          Se(xIntA <= 22 e xIntA > 12){     @ TRATA PARA SABER SE 5-4 É CAFÉ (CONSIDERANDO 22 MIN COMO TEMPO LIMITE) @
          eDif = xIntA - xDoze;             @ PEGA DIF DO CAFÉ E JOGA P AS HORAS FALTAS @
          HorSit[15] = HorSit[15] + eDif; 
          Senao Se(xIntA > 22){             @ SE CONSIDERA QUE 3-2 E 5-4 SAO AMBAS MAIORES QUE 22 MIN CANCELA (PQ DAI PODE TER SIDO BATIDAS P EXTRAS) @
            Cancel(1);
          }
        }
    }
}
    Se (xHorAcc[8] <> 0 e xHorAcc[9] = 0) {  @ CONSIDERA 8 MARC. E NÃO MAIS QUE ISSO, ASSUME QUE HOUVE 2 CAFÉS @ 
        xIntA = (xHorAcc[3] - xHorAcc[2]); 
        xIntB = (xHorAcc[7] - xHorAcc[6]); 
        
        Se (xIntA <= 22 e xIntA > 12){
          eDif1 = xIntA - xDoze;         
          HorSit[15] = HorSit[15] + eDif1;
        }
        Senao Se(xIntB <= 22 e xIntB > 12){
          eDif2 = xIntB - xDoze;           
          HorSit[15] = HorSit[15] + eDif2;
        }

}


Senao {

    xInt1 = (xHorAcc[3] - xHorAcc[2]);

    @ -- Se houver 5 marcações ou mais -- @

    Se(xHorAcc[5] <> 0)
    {
    xInt2 = (xHorAcc[5] - xHorAcc[4]);
    }

    @ -- Se houver 7 marcações ou mais -- @

    Se(xHorAcc[7] <> 0)
    {
      xInt3 = (xHorAcc[7] - xHorAcc[6]);
    }


    @ -- Primeiro intervalo de Marcações -- @

    Se((xInt1 >= 15) e (xInt1 < 30))
    {
      HorSit[1] = HorSit[1] + 15;

        HorSit[15] = xInt1 - 15;

    }
    Senao Se (xInt1 < 15)
    {
      HorSit[1] = HorSit[1] + xInt1;
      HorSit[105] = HorSit[105] - xInt1;
    }

    @ -- Segundo intervalo de Marcações -- @

    Se((xInt2 >= 15) e (xInt2 < 30))
    {
      HorSit[1] = HorSit[1] + 15;
      xsit15 =  xInt2 - 15;
      HorSit[15] = xsit15 + HorSit[15];
    
    }                   
    Senao Se ((xInt2 < 15) e (xInt2 <> 0))
    {
      HorSit[1] = HorSit[1] + xInt2;
      Se(HorSit[105] <> 0)
      {
        HorSit[105] = HorSit[105] - 15;
      }
      Se((HorSit[101] <> 0) e (HorSit[105] = 0))
      {
        HorSit[101] = xInt2 - 15;
      } 
    }

    @ -- Terceiro intervalo de Marcações -- @

    Se((xInt3 >= 15) e (xInt3 < 30))
    {
      HorSit[1] = HorSit[1] + 15;
      xsit15 =  xInt3 - 15;
      HorSit[15] = xsit15 + HorSit[15];
    
    }
    Senao Se ((xInt3 < 15)  e (xInt3 <> 0))
    {
      HorSit[1] = HorSit[1] + xInt3;
      HorSit[105] = HorSit[105] - xInt3;
    }
}

Se(HorSit[1] > 528)
{
  @HorSit[303] = Horsit[1] - 528;@

  HorSit[1] = 528;
}

















 /*   
Se((Horsit[520] <> 0) ou (Horsit[521] <> 0))
{
  xValor = 0;
  xQtdBhr = 0;
  RetBHRDat(R034FUN.NumEmp,R034FUN.tipcol,R034FUN.numcad,2,DatPro,xQtdBhr);

  Se((xQtdBhr + Horsit[520] + (Horsit[521] * 1.4666)) > 1440)
  {
    Se(HorSit[520] <> 0)
    {
      xValor = (xQtdBhr + Horsit[520] + (Horsit[521] * 1.4666)) - 1440;
      ArredondarValor(xValor, 0);  
      HorSit[301]  = xValor;
      HorSit[520] = HorSit[520] - HorSit[301];
    }
    Se(HorSit[521] <> 0)
    {
      xValor = ((xQtdBhr + Horsit[520] + (Horsit[521] * 1.4666)) - 1440) / 1.4666;
      ArredondarValor(xValor, 0);
      HorSit[301]  = xValor;
      HorSit[521] = HorSit[521] - HorSit[301];

    }
  }
}  */   
